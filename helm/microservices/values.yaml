# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Auth Service Configuration
auth:
  enabled: true
  image:
    repository: auth-service
    tag: latest
    pullPolicy: IfNotPresent
  
  replicas: 1
  
  service:
    type: ClusterIP
    port: 9001
    targetPort: 9001
    
  grpc:
    port: 50051
    targetPort: 50051
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
      
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "9001"
    - name: GRPC_PORT
      value: "50051"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: database-secret
          key: url
    - name: REDIS_URL
      valueFrom:
        secretKeyRef:
          name: redis-secret
          key: url
    - name: JWT_SECRET
      valueFrom:
        secretKeyRef:
          name: auth-secret
          key: jwt-secret
    - name: JWT_REFRESH_SECRET
      valueFrom:
        secretKeyRef:
          name: auth-secret
          key: jwt-refresh-secret
          
  livenessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Post Service Configuration
post:
  enabled: true
  image:
    repository: post-service
    tag: latest
    pullPolicy: IfNotPresent
    
  replicas: 1
  
  service:
    type: ClusterIP
    port: 9002
    targetPort: 9002
    
  grpc:
    port: 50052
    targetPort: 50052
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
      
  env:
    - name: NODE_ENV
      value: "production"
    - name: PORT
      value: "9002"
    - name: GRPC_PORT
      value: "50052"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: database-secret
          key: url
    - name: REDIS_URL
      valueFrom:
        secretKeyRef:
          name: redis-secret
          key: url
    - name: AUTH_GRPC_URL
      value: "auth-service:50051"
      
  livenessProbe:
    httpGet:
      path: /health
      port: 9002
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    httpGet:
      path: /health
      port: 9002
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Kong API Gateway Configuration
kong:
  enabled: true
  image:
    repository: kong
    tag: latest
    pullPolicy: IfNotPresent
    
  replicas: 1
  
  service:
    type: LoadBalancer
    port: 8000
    targetPort: 8000
    adminPort: 8001
    adminTargetPort: 8001
    
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
      
  env:
    - name: KONG_DATABASE
      value: "off"
    - name: KONG_DECLARATIVE_CONFIG
      value: "/var/lib/kong/kong.yml"
    - name: KONG_PROXY_ACCESS_LOG
      value: "/dev/stdout"
    - name: KONG_ADMIN_ACCESS_LOG
      value: "/dev/stdout"
    - name: KONG_PROXY_ERROR_LOG
      value: "/dev/stderr"
    - name: KONG_ADMIN_ERROR_LOG
      value: "/dev/stderr"
    - name: KONG_ADMIN_LISTEN
      value: "0.0.0.0:8001"
    - name: KONG_PROXY_LISTEN
      value: "0.0.0.0:8000"
      
  livenessProbe:
    exec:
      command:
        - kong
        - health
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    exec:
      command:
        - kong
        - health
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Database Configuration (PostgreSQL)
postgresql:
  enabled: true
  image:
    repository: postgres
    tag: "15-alpine"
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 5432
    targetPort: 5432
    
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
      
  persistence:
    enabled: true
    size: 10Gi
    storageClass: ""
    
  env:
    - name: POSTGRES_USER
      value: "admin"
    - name: POSTGRES_PASSWORD
      valueFrom:
        secretKeyRef:
          name: database-secret
          key: password
    - name: POSTGRES_DB
      value: "postgres"
      
  livenessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - admin
        - -d
        - postgres
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - admin
        - -d
        - postgres
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Redis Configuration
redis:
  enabled: true
  image:
    repository: redis
    tag: "7-alpine"
    pullPolicy: IfNotPresent
    
  service:
    type: ClusterIP
    port: 6379
    targetPort: 6379
    
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
      
  persistence:
    enabled: true
    size: 5Gi
    storageClass: ""
    
  command:
    - redis-server
    - --appendonly
    - "yes"
    - --maxmemory
    - "256mb"
    - --maxmemory-policy
    - "allkeys-lru"
    
  livenessProbe:
    exec:
      command:
        - redis-cli
        - ping
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    
  readinessProbe:
    exec:
      command:
        - redis-cli
        - ping
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Ingress Configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
  hosts:
    - host: microservices.local
      paths:
        - path: /
          pathType: Prefix
          service:
            name: kong-service
            port: 8000
  tls: []

# Secret Configuration
secrets:
  database:
    create: true
    data:
      url: "postgresql://admin:master123@postgresql-service:5432/postgres"
      password: "master123"
      
  redis:
    create: true
    data:
      url: "redis://redis-service:6379"
      
  auth:
    create: true
    data:
      jwt-secret: "your-jwt-secret-here"
      jwt-refresh-secret: "your-jwt-refresh-secret-here"