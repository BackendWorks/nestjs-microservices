# Global settings
global:
  environment: development

# Kong API Gateway configuration
kong:
  name: backendworks-ingress
  ingressController:
    enabled: true
    ingressClass: kong
  rateLimiting:
    perMinute: 60
  paths:
    - path: /auth
      pathType: Prefix
      name: auth-service
      port: 9001
    - path: /post
      pathType: Prefix
      name: post-service
      port: 9002
    - path: /files
      pathType: Prefix
      name: files-service
      port: 9003
    - path: /notification
      pathType: Prefix
      name: notification-service
      port: 9004

# Microservices configuration
services:
  auth-service:
    nameSpace: default
    replicaCount: 1
    image:
      repository: backendworks-auth
      tag: latest
      pullPolicy: IfNotPresent
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9001"
    imagePullSecrets: [] # Add image pull secrets here if needed
    deployment:
      restartPolicy: Always
    env:
      APP_NAME: "@backendworks/auth"
      APP_ENV: "development"
      HTTP_ENABLE: "true"
      HTTP_HOST: "0.0.0.0"
      HTTP_PORT: "9001"
      HTTP_VERSIONING_ENABLE: "true"
      HTTP_VERSION: "1"
      ACCESS_TOKEN_SECRET_KEY: "testme"
      ACCESS_TOKEN_EXPIRED: "1d"
      REFRESH_TOKEN_SECRET_KEY: "testme"
      REFRESH_TOKEN_EXPIRED: "7d"
      RABBITMQ_URL: "amqp://admin:master123@rabbitmq:5672"
      RABBITMQ_AUTH_QUEUE: "auth_queue"
      DATABASE_URL: "postgresql://admin:master123@postgres:5432/auth_db?schema=public"
    service:
      name: auth-service
      type: ClusterIP
      externalPort: 9001
      internalPort: 9001
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9001"
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    livenessProbe:
      httpGet:
        path: /api/health
        port: http
    readinessProbe:
      httpGet:
        path: /api/health
        port: http

  files-service:
    nameSpace: default
    replicaCount: 1
    image:
      repository: backendworks-files
      tag: latest
      pullPolicy: IfNotPresent
    deployment:
      restartPolicy: Always
    env:
      APP_NAME: "@backendworks/files"
      APP_ENV: "development"
      HTTP_ENABLE: "true"
      HTTP_HOST: "0.0.0.0"
      HTTP_PORT: "9003"
      HTTP_VERSIONING_ENABLE: "true"
      HTTP_VERSION: "1"
      RABBITMQ_URL: "amqp://admin:master123@rabbitmq:5672"
      RABBITMQ_FILES_QUEUE: "files_queue"
      RABBITMQ_AUTH_QUEUE: "auth_queue"
      DATABASE_URL: "mongodb://mongodb:27017/files"
      AWS_S3_REGION: "ap-south-1"
      AWS_S3_ACCESS_KEY: "key"
      AWS_S3_SECRET_KEY: "secret"
      AWS_S3_BUCKET: "bucket"
    service:
      name: files-service
      type: ClusterIP
      externalPort: 9003
      internalPort: 9003
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    livenessProbe:
      httpGet:
        path: /api/health
        port: http
    readinessProbe:
      httpGet:
        path: /api/health
        port: http

  notification-service:
    nameSpace: default
    replicaCount: 1
    image:
      repository: backendworks-notification
      tag: latest
      pullPolicy: IfNotPresent
    deployment:
      restartPolicy: Always
    env:
      APP_NAME: "@backendworks/notification"
      APP_ENV: "development"
      HTTP_ENABLE: "true"
      HTTP_HOST: "0.0.0.0"
      HTTP_PORT: "9004"
      HTTP_VERSIONING_ENABLE: "true"
      HTTP_VERSION: "1"
      RABBITMQ_URL: "amqp://admin:master123@rabbitmq:5672"
      RABBITMQ_NOTIFICATION_QUEUE: "notification_queue"
      RABBITMQ_AUTH_QUEUE: "auth_queue"
      DATABASE_URL: "mongodb://mongodb:27017/notifications"
      AWS_SES_REGION: "region"
      AWS_SES_ACCESS_KEY: "key"
      AWS_SES_SECRET_KEY: "secret"
      AWS_SES_SOURCE_EMAIL: "test@email.com"
    service:
      name: notification-service
      type: ClusterIP
      externalPort: 9004
      internalPort: 9004
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    livenessProbe:
      httpGet:
        path: /api/health
        port: http
    readinessProbe:
      httpGet:
        path: /api/health
        port: http

  post-service:
    nameSpace: default
    replicaCount: 1
    image:
      repository: backendworks-post
      tag: latest
      pullPolicy: IfNotPresent
    deployment:
      restartPolicy: Always
    env:
      APP_NAME: "@backendworks/post"
      APP_ENV: "development"
      HTTP_ENABLE: "true"
      HTTP_HOST: "0.0.0.0"
      HTTP_PORT: "9002"
      HTTP_VERSIONING_ENABLE: "true"
      HTTP_VERSION: "1"
      RABBITMQ_URL: "amqp://admin:master123@rabbitmq:5672"
      RABBITMQ_AUTH_QUEUE: "auth_queue"
      RABBITMQ_POST_QUEUE: "post_queue"
      DATABASE_URL: "postgresql://admin:master123@postgres:5432/post_db?schema=public"
    service:
      name: post-service
      type: ClusterIP
      externalPort: 9002
      internalPort: 9002
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    livenessProbe:
      httpGet:
        path: /api/health
        port: http
    readinessProbe:
      httpGet:
        path: /api/health
        port: http

# Loki Stack configuration
loki-stack:
  loki:
    enabled: true
    replicas: 1
    persistence:
      enabled: true
      storageClassName: "standard"
      accessModes:
        - ReadWriteOnce
      size: 10Gi
    service:
      type: ClusterIP
      port: 3100
    config:
      schema_config:
        configs:
          - from: 2020-05-15
            store: boltdb-shipper
            object_store: filesystem
            schema: v11
            index:
              prefix: index_
              period: 24h

  grafana:
    enabled: true
    replicas: 1
    service:
      type: NodePort
      ports:
        - port: 80
          targetPort: 3000
          nodePort: 32000
    adminUser: admin
    adminPassword: password
    persistence:
      enabled: true
      storageClassName: "standard"
      accessModes:
        - ReadWriteOnce
      size: 5Gi

  promtail:
    enabled: false

  fluent-bit:
    enabled: true
    config:
      inputs: |
        [INPUT]
            Name tail
            Path /var/log/containers/*.log
            Parser docker
            Tag kube.*
            Mem_Buf_Limit 5MB
            Skip_Long_Lines On
      filters: |
        [FILTER]
            Name kubernetes
            Match kube.*
            Merge_Log On
            Keep_Log Off
            K8S-Logging.Parser On
            K8S-Logging.Exclude On
      outputs: |
        [OUTPUT]
            Name loki
            Match kube.*
            Host loki
            Port 3100
            Labels job=fluentbit
            Label_Keys $kubernetes['pod_name'],$kubernetes['namespace_name']
            Line_Format json

  prometheus:
    enabled: false
