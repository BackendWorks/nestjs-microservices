# Global settings
global:
  environment: development

# Kong API Gateway configuration
kong:
  name: backendworks-ingress
  env:
    database: "off"
  ingressController:
    enabled: true
    ingressClass: kong
  admin:
    tls:
      parameters: []
  ingressAnnotations:
    # Add any additional annotations here
    # konghq.com/protocols: "https"
  tls:
    []
    # - hosts:
    #     - your-domain.com
    #   secretName: your-tls-secret
  rateLimiting:
    perMinute: 60
  paths:
    - path: /auth
      pathType: Prefix
      name: auth-service
      port: 9001
    - path: /post
      pathType: Prefix
      name: post-service
      port: 9002
    - path: /files
      pathType: Prefix
      name: files-service
      port: 9003
    - path: /notification
      pathType: Prefix
      name: notification-service
      port: 9004

# Microservices configuration
services:
  - name: auth
    nameSpace: default
    replicaCount: 1
    image:
      repository: backendworks-auth
      tag: latest
      pullPolicy: IfNotPresent
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9001"
    imagePullSecrets: [] # Add image pull secrets here if needed
    deployment:
      restartPolicy: Always
    env:
      - key: APP_NAME
        value: "@backendworks/auth"
      - key: APP_ENV
        value: development
      - key: HTTP_ENABLE
        value: "true"
      - key: HTTP_HOST
        value: "0.0.0.0"
      - key: HTTP_PORT
        value: "9001"
      - key: HTTP_VERSIONING_ENABLE
        value: "true"
      - key: HTTP_VERSION
        value: "1"
      - key: ACCESS_TOKEN_SECRET_KEY
        value: "testme"
      - key: ACCESS_TOKEN_EXPIRED
        value: "1d"
      - key: REFRESH_TOKEN_SECRET_KEY
        value: "testme"
      - key: REFRESH_TOKEN_EXPIRED
        value: "7d"
      - key: RABBITMQ_URL
        value: "amqp://admin:master123@rabbitmq:5672"
      - key: RABBITMQ_AUTH_QUEUE
        value: "auth_queue"
      - key: DATABASE_URL
        value: "postgresql://admin:master123@postgres:5432/auth_db?schema=public"
    service:
      name: auth-service
      type: ClusterIP
      externalPort: 9001
      internalPort: 9001
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9001"
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    livenessProbe:
      httpGet:
        path: /api/health
        port: http
    readinessProbe:
      httpGet:
        path: /api/health
        port: http

  - name: files
    nameSpace: default
    replicaCount: 1
    image:
      repository: backendworks-files
      tag: latest
      pullPolicy: IfNotPresent
    deployment:
      restartPolicy: Always
    env:
      - key: APP_NAME
        value: "@backendworks/files"
      - key: APP_ENV
        value: development
      - key: HTTP_ENABLE
        value: "true"
      - key: HTTP_HOST
        value: "0.0.0.0"
      - key: HTTP_PORT
        value: "9003"
      - key: HTTP_VERSIONING_ENABLE
        value: "true"
      - key: HTTP_VERSION
        value: "1"
      - key: RABBITMQ_URL
        value: "amqp://admin:master123@rabbitmq:5672"
      - key: RABBITMQ_FILES_QUEUE
        value: "files_queue"
      - key: RABBITMQ_AUTH_QUEUE
        value: "auth_queue"
      - key: DATABASE_URL
        value: "mongodb://mongodb:27017/files"
      - key: AWS_S3_REGION
        value: ""
      - key: AWS_S3_ACCESS_KEY
        value: ""
      - key: AWS_S3_SECRET_KEY
        value: ""
      - key: AWS_S3_BUCKET
        value: ""
    service:
      name: files-service
      type: ClusterIP
      externalPort: 9003
      internalPort: 9003
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    livenessProbe:
      httpGet:
        path: /api/health
        port: http
    readinessProbe:
      httpGet:
        path: /api/health
        port: http

  - name: notification
    nameSpace: default
    replicaCount: 1
    image:
      repository: backendworks-notification
      tag: latest
      pullPolicy: IfNotPresent
    deployment:
      restartPolicy: Always
    env:
      - key: APP_NAME
        value: "@backendworks/notification"
      - key: APP_ENV
        value: development
      - key: HTTP_ENABLE
        value: "true"
      - key: HTTP_HOST
        value: "0.0.0.0"
      - key: HTTP_PORT
        value: "9004"
      - key: HTTP_VERSIONING_ENABLE
        value: "true"
      - key: HTTP_VERSION
        value: "1"
      - key: RABBITMQ_URL
        value: "amqp://admin:master123@rabbitmq:5672"
      - key: RABBITMQ_NOTIFICATION_QUEUE
        value: "notification_queue"
      - key: RABBITMQ_AUTH_QUEUE
        value: "auth_queue"
      - key: DATABASE_URL
        value: "mongodb://mongodb:27017/notifications"
      - key: AWS_SES_REGION
        value: ""
      - key: AWS_SES_ACCESS_KEY
        value: ""
      - key: AWS_SES_SECRET_KEY
        value: ""
      - key: AWS_SES_SOURCE_EMAIL
        value: ""
    service:
      name: notification-service
      type: ClusterIP
      externalPort: 9004
      internalPort: 9004
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    livenessProbe:
      httpGet:
        path: /api/health
        port: http
    readinessProbe:
      httpGet:
        path: /api/health
        port: http

  - name: post
    nameSpace: default
    replicaCount: 1
    image:
      repository: backendworks-post
      tag: latest
      pullPolicy: IfNotPresent
    deployment:
      restartPolicy: Always
    env:
      - key: APP_NAME
        value: "@backendworks/post"
      - key: APP_ENV
        value: development
      - key: HTTP_ENABLE
        value: "true"
      - key: HTTP_HOST
        value: "0.0.0.0"
      - key: HTTP_PORT
        value: "9002"
      - key: HTTP_VERSIONING_ENABLE
        value: "true"
      - key: HTTP_VERSION
        value: "1"
      - key: RABBITMQ_URL
        value: "amqp://admin:master123@rabbitmq:5672"
      - key: RABBITMQ_AUTH_QUEUE
        value: "auth_queue"
      - key: RABBITMQ_POST_QUEUE
        value: "post_queue"
      - key: DATABASE_URL
        value: "postgresql://admin:master123@postgres:5432/nestjs_post_db?schema=public"
    service:
      name: post-service
      type: ClusterIP
      externalPort: 9002
      internalPort: 9002
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    livenessProbe:
      httpGet:
        path: /api/health
        port: http
    readinessProbe:
      httpGet:
        path: /api/health
        port: http

# Loki Stack configuration
loki-stack:
  loki:
    enabled: true
    replicas: 1
    persistence:
      enabled: true
      storageClassName: "standard"
      accessModes:
        - ReadWriteOnce
      size: 10Gi
    service:
      type: ClusterIP
      port: 3100
    config:
      schema_config:
        configs:
          - from: 2020-05-15
            store: boltdb-shipper
            object_store: filesystem
            schema: v11
            index:
              prefix: index_
              period: 24h

  grafana:
    enabled: true
    replicas: 1
    service:
      type: NodePort
      port: 80
      targetPort: 3000
    adminUser: admin
    adminPassword: password
    persistence:
      enabled: true
      storageClassName: "standard"
      accessModes:
        - ReadWriteOnce
      size: 5Gi

  promtail:
    enabled: false
  fluent-bit:
    enabled: true
    config:
      inputs: |
        [INPUT]
            Name tail
            Path /var/log/containers/*.log
            Parser docker
            Tag kube.*
            Mem_Buf_Limit 5MB
            Skip_Long_Lines On
      filters: |
        [FILTER]
            Name kubernetes
            Match kube.*
            Merge_Log On
            Keep_Log Off
            K8S-Logging.Parser On
            K8S-Logging.Exclude On
      outputs: |
        [OUTPUT]
            Name loki
            Match kube.*
            Host loki
            Port 3100
            Labels job=fluentbit
            Label_Keys $kubernetes['pod_name'],$kubernetes['namespace_name']
            Line_Format json
  prometheus:
    enabled: false
