version: "3.2"

services:
  user:
    image: public.ecr.aws/y5g9y5s8/ms-user
    ports:
      - ${USER_PORT}:${USER_PORT}
    env_file:
      - ./.env
    depends_on:
      - database
  token:
    image: public.ecr.aws/y5g9y5s8/ms-token
    env_file:
      - ./.env
  kong:
    image: hmake98/kong:latest
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_LISTEN: 0.0.0.0:8080
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:9000
    depends_on:
      - database
    ports:
      - 8080:8080
      - 9000:9000
  database:
    image: postgres:latest
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=master123
      - POSTGRES_DB=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
volumes:
  pg_data:
    external: true
    name: fs-04f9dba7972ff1b66
  rabbit_data:
    external: true
    name: fs-05cff8083b4b0a091

x-aws-cloudformation:
  Resources:
    # We convert external NFSMountTargets into something that we can have lots of and ignore, because
    # external mount targets already exist and docker compose does not understand how to manage that
    MyvolumenameNFSMountTargetOnSubnetN111111N:
      &my-volume-mount-overlay
      Type: AWS::EFS::AccessPoint
      Properties:
        SecurityGroups:
        SubnetId:
        FileSystemId: fs-04f9dba7972ff1b66
        AccessPointTags:
          - Key: Name
            Value: fs-04f9dba7972ff1b66
          - Key: com.docker.compose.project
            Value: my-project-name
          - Key: com.docker.compose.volume
            Value: my_volume_name
    MyvolumenameNFSMountTargetOnSubnetN222222N: *my-volume-mount-overlay
    MyvolumenameNFSMountTargetOnSubnetN333333N: *my-volume-mount-overlay
