version: "3"
services:
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9001:9001"
    env_file:
      - ./auth/.env.dev
    networks:
      - backend
    volumes:
      - ./auth:/app/auth
      - /app/auth/node_modules
  post:
    build:
      context: ./post
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9002:9002"
    env_file:
      - ./post/.env.dev
    networks:
      - backend
    volumes:
      - ./post:/app/post
      - /app/post/node_modules
  mailer:
    build:
      context: ./mailer
      dockerfile: Dockerfile
    restart: on-failure
    env_file:
      - ./mailer/.env.dev
    networks:
      - backend
    volumes:
      - ./mailer:/app/mailer
      - /app/mailer/node_modules
  files:
    build:
      context: ./files
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9003:9003"
    env_file:
      - ./files/.env.dev
    networks:
      - backend
    volumes:
      - ./files:/app/files
      - /app/files/node_modules
  notification:
    build:
      context: ./notification
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9004:9004"
    env_file:
      - ./notification/.env.dev
    networks:
      - backend
    volumes:
      - ./notification:/app/notification
      - /app/notification/node_modules
  kong:
    build:
      context: ./kong
      dockerfile: Dockerfile
    restart: unless-stopped
    command: "kong start"
    volumes:
      - ./kong/conf/kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: "debug"
    ports:
      - "8000:8000"
      - "8001:8001"
    networks:
      - backend
  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=master123
      - POSTGRES_DB=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
networks:
  backend:
    driver: bridge
volumes:
  pg_data:
    driver: local
  rabbit_data:
    driver: local
  mongo_data:
    driver: local
