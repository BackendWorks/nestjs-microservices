version: "3.0"

services:
  user:
    restart: on-failure

    build:
      context: ./user
    hostname: ${USER_HOST}
    ports:
      - ${USER_PORT}:${USER_PORT}
    env_file:
      - ./.env
      - ./user/.${NODE_ENV}.env
    networks:
      - backend
    volumes:
      - ./user:/var/www/user
      - /var/www/user/node_modules
    depends_on:
      - database
    links:
      - database
      - rabbitmq
  post:
    restart: on-failure
    build:
      context: ./post
    hostname: ${POST_HOST}
    ports:
      - ${POST_PORT}:${POST_PORT}
    env_file:
      - ./.env
      - ./post/.${NODE_ENV}.env
    networks:
      - backend
    volumes:
      - ./post:/var/www/post
      - /var/www/post/node_modules
    depends_on:
      - database
    links:
      - database
      - rabbitmq
  notification:
    restart: on-failure
    build:
      context: ./notification
    hostname: ${NOTIFICATION_HOST}
    ports:
      - ${NOTIFICATION_PORT}:${NOTIFICATION_PORT}
    env_file:
      - ./.env
      - ./notification/.${NODE_ENV}.env
    networks:
      - backend
    volumes:
      - ./notification:/var/www/notification
      - /var/www/notification/node_modules
    depends_on:
      - mongodb
    links:
      - mongodb
      - rabbitmq
  files:
    restart: on-failure
    build:
      context: ./files
    hostname: ${FILES_HOST}
    ports:
      - ${FILES_PORT}:${FILES_PORT}
    env_file:
      - ./.env
      - ./files/.${NODE_ENV}.env
    networks:
      - backend
    volumes:
      - ./files:/var/www/files
      - /var/www/files/node_modules
    depends_on:
      - mongodb
    links:
      - mongodb
      - rabbitmq
  mailer:
    restart: on-failure
    build:
      context: ./mailer
    hostname: ${MAILER_HOST}
    env_file:
      - ./.env
      - ./mailer/.${NODE_ENV}.env
    networks:
      - backend
    volumes:
      - ./mailer:/var/www/mailer
      - /var/www/mailer/node_modules
    links:
      - rabbitmq
  token:
    restart: on-failure
    build:
      context: ./token
    hostname: ${TOKEN_HOST}
    env_file:
      - ./.env
      - ./token/.${NODE_ENV}.env
    networks:
      - backend
    volumes:
      - ./token:/var/www/token
      - /var/www/token/node_modules
    links:
      - rabbitmq
  logger:
    restart: on-failure
    build:
      context: ./logger
    hostname: ${LOGGER_HOST}
    env_file:
      - ./.env
      - ./logger/.${NODE_ENV}.env
    depends_on:
      - rabbitmq
    networks:
      - backend
    volumes:
      - ./logger:/var/www/logger
      - /var/www/logger/node_modules
    links:
      - rabbitmq
  kong:
    image: kong:latest
    hostname: kong
    restart: always
    networks:
      - backend
    command: "kong start"
    volumes:
      - ./kong.yml:/usr/local/kong/declarative/kong.yml
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: 0.0.0.0:8080
      KONG_PROXY_LISTEN_SSL: 0.0.0.0:8443
      KONG_ADMIN_LISTEN: 0.0.0.0:9000
    depends_on:
      - database
    ports:
      - "8080:8080"
      - "9000:9000"
  database:
    hostname: database
    image: postgres:latest
    ports:
      - 5431:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=master123
      - POSTGRES_DB=postgres
    volumes:
      - database:/var/lib/postgresql/data
    networks:
      - backend
  rabbitmq:
    image: "rabbitmq:3-management"
    hostname: rabbitmq
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "5671:5672"
      - "15671:15672"
    env_file:
      - .env
    networks:
      - backend
  cache:
    hostname: redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - cache:/data
    networks:
      - backend
  mongodb:
    hostname: mongodb
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: master123
    ports:
      - 27018:27017
    volumes:
      - mongodb:/data/db
    networks:
      - backend
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.5.1
    ports:
      - "9200:9200"
      - "9300:9300"
    command: elasticsearch
    volumes:
      - ./logger/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - es_data:/usr/share/elasticsearch/data
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:7.5.1
    volumes:
      - ./logger/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logger/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - elk
    depends_on: ['elasticsearch']

  kibana:
    image: docker.elastic.co/kibana/kibana:7.5.1
    volumes:
      - ./logger/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on: ['elasticsearch']
  filebeat:
    command: ['--strict.perms=false']
    build:
      context: ./logger/filebeat/
    volumes:
      - "/var/lib/docker/containers:/usr/share/dockerlogs/data:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on: ['elasticsearch', 'logstash']
    networks:
      - elk
networks:
  backend:
    driver: bridge
  elk:
    driver: bridge
volumes:
  database:
    driver: local
  cache:
    driver: local
  mongodb:
    driver: local
  rabbit_data:
    driver: local
  es_data:
    driver: local
