version: "3"
services:
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9001:9001"
    env_file:
      - ./auth/.env.local
    networks:
      - backend
    volumes:
      - ./auth:/app/auth
      - /app/auth/node_modules
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: localhost:24224
        tag: auth-service
  post:
    build:
      context: ./post
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9002:9002"
    env_file:
      - ./post/.env.local
    networks:
      - backend
    volumes:
      - ./post:/app/post
      - /app/post/node_modules
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: localhost:24224
        tag: post-service
  mailer:
    build:
      context: ./mailer
      dockerfile: Dockerfile
    restart: on-failure
    env_file:
      - ./mailer/.env.local
    networks:
      - backend
    volumes:
      - ./mailer:/app/mailer
      - /app/mailer/node_modules
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: localhost:24224
        tag: mailer-service
  files:
    build:
      context: ./files
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9003:9003"
    env_file:
      - ./files/.env.local
    networks:
      - backend
    volumes:
      - ./files:/app/files
      - /app/files/node_modules
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: localhost:24224
        tag: files-service
  notification:
    build:
      context: ./notification
      dockerfile: Dockerfile
    restart: on-failure
    ports:
      - "9004:9004"
    env_file:
      - ./notification/.env.local
    networks:
      - backend
    volumes:
      - ./notification:/app/notification
      - /app/notification/node_modules
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: localhost:24224
        tag: notification-service
  kong:
    build:
      context: ./kong
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8443:8443"
    networks:
      - backend
    logging:
      driver: fluentd
      options:
        fluentd-async: "true"
        fluentd-address: localhost:24224
        tag: kong
  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=master123
      - POSTGRES_DB=postgres
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=master123
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    networks:
      - backend
  redis:
    image: redis:latest
    restart: always
    command: redis-server --save 20 1 --loglevel warning --requirepass master123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: master123
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
  fluent-bit:
    environment:
      LOG_LEVEL: debug
      LOKI_URL: http://loki:3100/loki/api/v1/push
    build:
      context: ./fluent-bit
      dockerfile: Dockerfile
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - backend
  loki:
    image: grafana/loki:latest
    expose:
      - "3100"
    networks:
      - backend
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    networks:
      - backend
  renderer:
    image: grafana/grafana-image-renderer:latest
    expose:
      - "8081"
    environment:
      ENABLE_METRICS: "true"
    networks:
      - backend
networks:
  backend:
    driver: bridge
volumes:
  pg_data:
    driver: local
  rabbit_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local